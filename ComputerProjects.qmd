
# Computer Projects




---

##  Robotics Club Setup 

#### Maker kits:
1. Tools
    1. Build tray/mat (with edges, for roll-y parts)
    1. ESC bracelet
    1. Connector kits (JST PH) and crimpers for making cables
1. Parts warehousing
    1. Tackle box with baggie system
1. Documentation
    1. GoPro for video logging
    1. Rocket book
    1. DocOnce
    1. private git server
1. Dev Environment
    1. Platforms
        1. IaaS: AWS Workspace
        1. PaaS: Platform.io
        1. Local: Raspberry Pi
    1. Software:
        1. Fritzing
        1. 3D CAD
            1. SolidPython (OpenSCAD) (because programming is better)
            1. DesignSpark Mechanical
              1. Opens .skp!
              1. But no linux
1. [Autodesk Fusion](https://www.autodesk.com/campaigns/fusion-360/factory-experience) (but not free)
        1. Blockly
        1. Anaconda Python Env
        1. Atom

#### Projects:
1. Init: Individual project options
    1. Basic battle bots
    1. Steampunk wearables
    1. Ornaments
1. Main Missions: Group effort determined by vote
    1. Citizen science
    1. Tech-art integration


#### Requirements:
* Grades
* Portfolio
* Teacher recommendation
* Behavior


#### Coding DevEnv:
* Visual programming (blockly-scratch-mindstorm)
* Individual programming jobs with unit testing
* Agile - Kanban - scrum
* Arduino Studio must be installed locally, no good browser-based IDE (need to test PlatformIO though)


---

##  Home Internet Gateway 

#### Description: Cable modem, IoT gateway, wifi router/repeater, and firewall device.


#### User Story: I just want the internet to work. I also want to protect my family and house, integrate with Domotics and IoT, and give the internet company their crap hardware back. Maybe I can even eventually dump the internet company completely for community-based wifi or a free-space optical link.


#### Feature Set:
1. Parental Filtering and logging
1. Directional Wifi
1. Switching between internet sources
1. Performance and health dashboard
1. wikipedia and media cache
1. privacy and ad blocking
1. [Othernet](https://othernet.is/) Integration (I *so* hope this project works)
1. [FSO link](https://github.com/IRNAS/FSO-systems)


#### Phasing:
* configure basic access point (check functionality after each step)
* Basic config shown [here](https://www.raspberrypi.org/documentation/configuration/wireless/access-point-routed.md) (first part only) including security (but not ufw firewall) set up shown [here](https://www.raspberrypi.org/documentation/configuration/security.md)
    * Use wlan1 instead of on-board wlan0
* Enable [hostapd](https://lb.raspberrypi.org/forums/viewtopic.php?t=92859) and [dnsmasq](https://www.linux.com/tutorials/advanced-dnsmasq-tips-and-tricks/) logging
* Open network via hostapd conf shown [here](https://elinux.org/RPI-Wireless-Hotspot)
* [mod iptables to allow ssh in only](https://serverfault.com/questions/214996/iptables-allow-ssh-access-only-nothing-else-in-or-out)
    * check with nmap -sS -p 1-65535 <external ip>
* set up sshd with [best practices](https://www.cyberciti.biz/tips/linux-unix-bsd-openssh-server-best-practices.html)
  * create a log of sites visited by MAC address
* set up tcpdump to save link headers to [MySQL](https://www.raspberrypi.org/forums/viewtopic.php?t=237584) (see code below)
* The better option is to use a [MITM proxy](https://www.dinofizzotti.com/blog/2019-01-09-running-a-man-in-the-middle-proxy-on-a-raspberry-pi-3/) in transparent mode, but that requires users accepting and installing a certificate
* use [dash](https://dash-gallery.plotly.host/dash-oil-and-gas/) to create BI reports of traffic
* link with [MAC dbs](https://code.wireshark.org/review/gitweb?p=wireshark.git;a=blob_plain;f=manuf) and commonly-used domains DB
* set up [Dynamic DNS](https://aws.amazon.com/blogs/startups/how-to-build-a-serverless-dynamic-dns-system-with-aws/) (see code below)
* set up a DNS Sinkhole such as [pi-hole](https://en.wikipedia.org/wiki/Pi-hole) or [NoTrack](https://github.com/quidsup/notrack) to cut down on ads
* use OpenDNS to cut down on phishing and increase DNS lookup speeds ([Has to be set up in dnsmasq using option 6](https://www.raspberrypi.org/forums/viewtopic.php?t=210933))
* set up [tor](https://learn.adafruit.com/onion-pi?view=all) or a VPN
  * set up config landing page
    * Switch choice of wlan0 or eth0
    * Tune filters, dyndns, dns sink
    * Show dash traffic metrics
    * Show status metrics (by user)
* swap cable modem
* add external storage with media library
* install othernet
* build FSO tranceivers
* Laser:https://www.adafruit.com/product/1056 transmitter coupled to a [photo transister](https://www.adafruit.com/product/2831) receiver mounted on a [spotting scope](https://www.amazon.com/BARSKA-15-40x50-Colorado-Spotting-Scope/dp/B0049IZMUW/ref=sr_1_16?dchild=1&keywords=spotting+scope&qid=1578058031&sr=8-16), with fiber optic modulators


#### BOM:
1. [Common Mobile Compute Platform](/._ComputerProjects010.html#___sec10) (two, one for testing, one for production)


#### Notes:
* <https://www.digikey.com/en/articles/techzone/2013/oct/building-free-space-optical-systems>
* <http://shop.oreilly.com/product/9780596002046.do>


#### GRAPHICS:

![ Line of sight between office and home.](./Programming/AP_Viewshed)



#### CODE:
[Link to the code](./code/route53update.py)



#### CODE:
[Link to the code](./code/watcher.py)



---

##  Arduino Wind Instrument 

#### Description: an inexpensive and simple electronic wind instrument to learn digital music programming


#### User Story: Real instruments are expensive, and you can only learn to play music...


#### Feature Set:
1. Breath and bite sensors
1. Sax fingering
1. Wireless midi port
1. FOSS full synth with effects



#### Phasing:
* Pick up an Akai EWI
* Make a portable sound system
* Pick up the Zynthian kit parts


#### BOM:
* <https://www.hifiberry.com/products/dacplus/>
* <https://www.amazon.com/BOSS-Audio-CE200M-Monoblock-Amplifier/dp/B0077IA7FG?th=1&psc=1>
* <https://www.amazon.com/Antigravity-Batteries-Battery-Starter-Charger/dp/B01L0F6K5C/ref=pd_aw_vtph_263_lp_tr_2/130-0236497-8146456?_encoding=UTF8&pd_rd_i=B01L0F6K5C&pd_rd_r=34b75632-85a1-11e9-9b09-4f16de09a724&pd_rd_w=rGCZ0&pd_rd_wg=hu7To&pf_rd_p=33304d62-e1a9-4538-a43c-b1d2dc49800d&pf_rd_r=1A8SNTZPHAMESVH6QJ0N&psc=1&refRID=1A8SNTZPHAMESVH6QJ0N>
* <https://www.adafruit.com/product/1601>
* <https://us.seeedstudio.com/5-inch-800x480-Capacitive-TouchScreen-p-2923.html?utm_source=Bazaar+%EF%BC%88%E7%94%B5%E5%95%86%EF%BC%89&utm_campaign=9162fdf13c-September+campaign+%E2%80%94%E2%80%94+1%24_9.21_Japanese_COPY_01&utm_medium=email&utm_term=0_4b071a49e3-9162fdf13c-49714817&ct=t()&mc_cid=9162fdf13c&mc_eid=3012c69022>


#### Notes:
* <https://hackaday.com/2014/09/18/a-diy-midi-wind-controller/>
* <https://gonzos.net/projects/ewi-pi/>
* <http://zynthian.org/>
* <https://ewiusb.com/software>


---

##  Motocomms 

#### Description:
A simple and mostly off-the-shelf communication and audio system for helmets


#### User Story:
helmet comm units are stupid expensive and sound terrible. And are additive to road
noise. And clumsy to control and link. And vendor specific. And another thing to keep charged.
And dumb in concept: who's wants a 5 hr running conversation when we just need to communicate
when stopped at an intersection about which way to turn? I want a way to use my noise-reducing
earbuds with an off the shelf radio through my phone so that I can also hear music or GPS.
Also, I like to keep my phone in my jacket pocket so there are no dangling wires. But I don't
want to have to look at the radio to use it or worry about charging it before riding.


#### Feature Set:
1. Custom radio integration
    1. GMRS appears to offer best license-free cost-vs-performance, with usable range of a couple miles and cross-compatibility with FRS
1. [Custom-built HAM radio?](http://projects.somerlot.net/._RoboticsProjects016.html#___sec15)
    1. Mesh wifi?
1. App-based mixer for phone for multi-audio stream management (GPS, music, and comms at once!)
1. Custom handlebar control to only activate mic during push-to-talk, or switch it to VOX for regular hands-free, or turn off music
1. Charging bracket
1. Cross-use capable for skiing, hiking, trekking, and emergencies that are out of cell range
1. Components that are cheap enough to keep spares of or available enough to find anywhere


#### Phasing:
1. Start with wired connectivity, with phone and radio in tank bag (done):
1. [Noise-cancelling earbuds](https://www.youtube.com/watch?v=4U5ArX7J7ps) but mounting the microphone is the tricky bit
1. Build [stereo-line mixer](https://www.monoprice.com/product?p_id=10146) to combine radio, phone, and earbuds
1. Add [handlebar switch](https://baofengtech.com/product/adapter-3-5mm/) to mic for PTT
1. Add wireless integration
    1. Build radio mount with charge bracket
    1. Build custom Bluetooth audio adapter to connect radio to phone


#### BOM:
* TBD depending on radio


#### Notes:
* Commercial offerings:
* <https://forums.radioreference.com/threads/would-a-gmrs-frs-radio-built-into-a-smartphone-or-battery-case-interest-you.394416/>
* <https://gotenna.com/>
* <https://beartooth.com>


---

##  Track GDD 
1. Use a (google?) calendar of observations to track growing degree days
    1. User enters garden events on the google calendar when it happens (ie sunflowers bloom)
      1. Next season the garden events are predicted
      1. can start off with a database of "known" GDD events (crops, etc)
      1. can track other seasonal things like honeybee activity, pest occurance, etc
    1. The program uses an online API to pull daily min/max temperatures for user's locale and calculate GDD for each observed event from previous seasons
      1. can use long-term temp forecasts to predict occurances of events
      1. Updates calendar of predicted events
1. Host on [pythonanywhere](https://www.pythonanywhere.com/user/csomerlot/shares/d795cc4ade44422ea92ab1f1d43fab8e/) as a web service
1. References
1. [Calculating GDD](https://en.wikipedia.org/wiki/Growing_degree-day)
1. Local temperature
    1. Onset datalogger
1. [DarkSky API](https://rapidapi.com/darkskyapis/api/dark-sky/endpoints)



---

##  Tartan designer 
1. A gui-based designer for weaving
1. A great use-case and teaching example of using graphics and Programming
1. <https://docs.python.org/3.3/library/turtle.html>

![ Sample output.](./code/TartanDesigner.py.png)

[Link to the code](./code/TartanDesigner.py)


---

##  Somerlot Shooting Support System (S4) 

#### Description:
Combination of hardware and software for calculations, capturing data, and visualizing shot placement


#### User Story:
Long range precision shooting requires accouting for many variables, as well as testing. Recording all this is
cumbersome. Viewing the shot with a spotting scope is difficult. Waiting to go down-range and observe results 
makes for a lot of wasted time. Unknown weather, distance, and load variables wastes a lot of ammo. Can a 
bespoke computing platform simplify it all and make it more enjoyable, efficient, and cheap?


#### Feature Set:
1. Computes and then measures ballistics
  1. Variables for load, wind, pressure, distance (via GPS with point averaging)
1. [Trajectory Science lib](https://pypi.org/project/ballistics/)
  1. stores data in a database
1. Long-range wifi for networking back to phone
1. Camera on target with webcam to phone, records placement in database
1. Integrates with a chronograph [like this one](https://shop.opticsplanet.com/competition-electronics-prochrono-dlx-with-bluetooth.html?_iv_code=2PI-CRO-CEPCDLX-CEI-3820&gclsrc=aw.ds&gclid=Cj0KCQiAj4ecBhD3ARIsAM4Q_jHLQj0npmX-11q3qBX8V61-LgSasbzHsAETmwMLLr9fmUjKxUiL5wQaAtIiEALw_wcB)


#### Phasing:
* Get a ballistics algorithm figured out
* Create web-based UI
* Build out hardware


#### BOM:
1. RPi 
1. Camera sensor with lens


---

##  Retail support tools 

###  Scheduler 
1. Rule-based genetic algorithm optimizer

[Link to the code](./code/Scheduler.py)


###  Rewards Program Calculator 
1. Description
    1. This application was developed to track customer spending, in order to determine eligibility for rewards certificates. It relies on data exported from the POS system, and does not in any way touch any databases.
1. Usage
    1. Overview
        1. Assuming that you created the spreadsheet correctly, usage is pretty self explanatory. There are only 3 buttons. However,
        if the application crashes, it should prompt you to automatically send an error report via email to the developer (Chris).
    1. Input
        1. This application reads in an excel spreadsheet that was exported from the EaglePOS system, which must include sales YTD
        for each customer, as well as mailing info. If the application can't find the necessary data, it should let you know.
    1. Output
        1. This is the secret part, and will be filled in later.
1. [Download installer](https://s3.amazonaws.com/projects.somerlot.net/Programming/setup.exe) (if you have permissions)



---

[Link to subsection](IoTProjects.do.txt)


---

[Link to subsection](RoboticsProjects.do.txt)
